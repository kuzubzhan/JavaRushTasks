<div class="wdghtml" taskKey="com.javarush.task.task29.task2909.big05">
<h3>Рефакторинг (5)</h3>
<p>5.1. Создание шаблонного метода.<br />
5.1.1. Добавь в класс <strong><span class="text-corporate">Human</span></strong> метод <mark>String getPosition()</mark>, который должен возвращать строку &#171;<em><strong>Человек</strong></em>&#171;.<br />
5.1.2. Переопредели этот метод в классе <strong><span class="text-corporate">Student</span></strong> и <span class="text-corporate"><strong>Teacher</strong></span>. Метод должен возвращать &#171;<em><strong>Студент</strong></em>&#187; и &#171;<em><strong>Преподаватель</strong></em>&#187; соответственно.<br />
5.1.3. Замени метод <mark>printData</mark> в подклассах шаблонным методом в базовом классе, использующим <mark>getPosition()</mark>.<br />
5.2. Замена делегирования наследованием. Класс <strong><span class="text-corporate">Worker</span></strong> должен наследоваться от <strong><span class="text-corporate">Human</span></strong>, а не содержать его.<br />
5.3. Переименование метода. Переименуй метод <mark>setSlr</mark>, чтобы было понятно сеттером чего является этот метод.</p>

<hr>
<h3>Рефакторинг (4)</h3>
<p>4.1. Замена наследования делегированием.<br />
4.1.1. Класс <span class="text-corporate"><strong>University</strong></span> не должен наследоваться от <strong><span class="text-corporate">Student</span></strong>.<br />
4.1.2. Класс <span class="text-corporate"><strong>University</strong></span> должен содержать список <strong><span class="text-red">students</span></strong>. Не забудь его инициализировать.<br />
4.1.3. Добавь <strong>сеттер</strong> и <strong>геттер</strong> для <span class="text-red"><strong>students</strong></span>.<br />
4.1.4. Университет имеет название (<mark class="user">name</mark>) и возраст (<mark class="user">age</mark>). Добавь необходимые поля, сеттеры и геттеры для них.<br />
4.2. Извлечение суперкласса.<br />
4.2.1. Создай класс <strong><span class="text-corporate">UniversityPerson</span></strong> в пакете <strong><span class="text-red">human</span></strong>.<br />
4.2.2. Перенеси в него поле <mark class="user">university</mark>.<br />
4.2.3. Перенеси <strong>сеттер</strong> и <strong>геттер</strong> для поля <mark class="user">university</mark>.<br />
4.2.4. Унаследуй необходимые классы от <strong><span class="text-corporate">UniversityPerson</span></strong>.<br />
4.3. Замена простого поля объектом. Измени тип поля <mark class="user">university</mark> на <span class="text-corporate"><strong>University</strong></span>.</p>

<hr>
<h3>Рефакторинг (3)</h3>
<p>3.1. Спуск поля. Спусти поле <mark class="user">course</mark> в соответствующий класс. Сделай его <strong>приватным</strong>.<br />
3.2. Спуск метода. Спусти <strong>геттер</strong> для поля <mark class="user">course</mark> в соответствующий класс.<br />
3.3. Извлечение интерфейса.<br />
3.3.1. Создай интерфейс <strong><span class="text-yellow">Alive</span></strong> (<strong>живой</strong>) в пакете <strong><span class="text-red">human</span></strong>.<br />
3.3.2. Интерфейс должен содержать метод жить <mark>live()</mark>.<br />
3.3.3. Добавь интерфейс нужному классу.<br />
3.4. Свертывание иерархии. Избавься от класса <strong><span class="text-corporate">Professor</span></strong>.</p>

<hr>
<h3>Рефакторинг (2)</h3>
<p>2.1. Извлечение подкласса.<br />
2.1.1. Добавь класс <strong><span class="text-corporate">Soldier</span></strong> в пакет <strong><span class="text-red">human</span></strong>.<br />
2.1.2. Избавься от поля <mark class="user">isSoldier</mark>.<br />
2.1.3. Перенеси в <strong><span class="text-corporate">Soldier</span></strong> необходимые методы из <mark><strong>Human</strong></mark>.<br />
2.1.4. Обнови сигнатуру конструктора <mark><strong>Human</strong></mark>.<br />
2.2. Подъем тела конструктора.<br />
2.2.1. Перенеси инициализацию полей <mark class="user">name</mark> и <mark class="user">age</mark> в подходящее место, добавь необходимые параметры в конструктор <mark><strong>Human</strong></mark>.<br />
2.2.2. Добавь конструктор в класс <strong><span class="text-corporate">Soldier</span></strong>.</p>

<hr>
<h3>Рефакторинг (1)</h3>
<p>Пришло время немного порефакторить.<br />
<strong>Википедия говорит:</strong> &#171;<em><strong>Рефакторинг</strong> (англ. refactoring) или реорганизация кода &#8212; процесс изменения внутренней структуры программы, не затрагивающий её внешнего поведения и имеющий целью облегчить понимание её работы. В основе рефакторинга лежит последовательность небольших эквивалентных (то есть сохраняющих поведение) преобразований. Поскольку каждое преобразование маленькое, программисту легче проследить за его правильностью, и в то же время вся последовательность может привести к существенной перестройке программы и улучшению её согласованности и четкости.&#187; Такими маленькими преобразованиями мы и будем заниматься. После каждого изменения следи за сохранностью работоспособности кода. Многие методы рефакторинга не однократно применены и проверены сообществом программистов. Получили свои названия. Каждое задание будет сопровождено названием рефакторинга. Ты всегда можешь прочитать более подробно о нем в книге Мартина Фаулера &#171;<strong>Рефакторинг: Улучшение существующего кода</strong></em>&#171;.</p>
<p>Начнем. Внимательно ознакомься с кодом пакета <strong><span class="text-red">human</span></strong> (человек).</p>
<p><strong>Задания:</strong><br />
1.1. Подъем поля. Подними поле <mark class="user">children</mark> в базовый класс.<br />
1.2. Подъем метода. Подними <strong>сеттер</strong> и <strong>геттер</strong> для <mark class="user">children</mark> в базовый класс.<br />
1.3. Инкапсуляция коллекции.<br />
1.3.1. Метод <mark>getChildren</mark> должен возвращать не модифицируемое представление списка <mark class="user">children</mark>.<br />
1.3.2. Убери сеттер для <mark class="user">children</mark>.<br />
1.3.3. Добавь методы <mark>addChild(<strong>Human</strong>)</mark> и <mark>removeChild(<strong>Human</strong>)</mark>. Реализуй их логику.</p>

</div>
